<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.msg.dao.MessageDAO">

<!-- 한 사람이 가지고 있는 msgInfo의 모든 리스트를 뽑는 쿼리. -->	
	<resultMap type="MsgInfoVO" id="msgInfoMap" autoMapping="true">
		<id property="msgRoomId"  column="MSG_ROOM_ID"/>
		<association property="msgRoom" autoMapping="true"  >
		</association>
	</resultMap>

	<select id="selectMsgInfoList" parameterType="String" resultMap="msgInfoMap">
<!-- 	<select id="selectMsgInfoList" parameterType="String" resultType="MsgInfoVO"> -->
	SELECT
	    a.MSG_ROOM_ID,
	    a.EMP_ID,
<!-- 	    TO_char(LAST_MSG_DATE,'yy.MM.dd HH24:mm') as LAST_MSG_DATE, -->
		 a.LAST_MSG_DATE,
	    a.LAST_MSG_CONTENT
	    
	    ,B.EMP_NAME
	    
	     ,  C.MSG_OPEN_DATE
		 , C.MSG_ROOM_NAME
		  
	FROM
	     MSG_INFO A INNER JOIN EMPLOYEE B ON (A.EMP_ID = B.EMP_ID)
	      LEFT OUTER JOIN MSG_ROOM C ON (A.MSG_ROOM_ID = C.MSG_ROOM_ID)
	WHERE a.EMP_ID = #{empId}
	order by a.LAST_MSG_DATE desc
	</select>
	
<!-- 	<resultMap type="MsgInfoVO" id="msgInfoMap" autoMapping="true"> -->
<!-- 		<id property="msgRoomId"  column="MSG_ROOM_ID"/> -->
<!-- 		<id property="empId"  column="EMP_ID"/> -->
<!-- 		<association property="msgRoom" javaType="MsgRoomVO" autoMapping="true"> -->
<!-- 			<id property="msgRoomId" column="MSG_ROOM_ID" /> -->
<!-- 		</association> -->
<!-- 	</resultMap> -->
<!-- 	<select id="selectMsgRoomEmp" parameterType="int" resultMap="msgInfoMap"> -->
<!-- 		SELECT -->
<!-- 	    A.EMP_ID, -->
<!-- 	    A.MSG_APPONENT, -->
<!-- 	    A.LAST_MSG_CONTENT, -->
<!-- 	    A.LAST_MSG_DATE -->
<!-- 	    , B.MSG_ROOM_ID, -->
<!-- 	    B.MSG_OPEN_DATE, -->
<!-- 	    B.MSG_ROOM_NAME -->
<!-- 	FROM -->
<!--     MSG_INFO A LEFT OUTER JOIN MSG_ROOM B ON (A.MSG_ROOM_ID = B.MSG_ROOM_ID) -->
<!--     WHERE A.MSG_ROOM_ID = #{msgRoomId} -->
<!-- 	</select> -->
	
	

<!-- RoomId로 해당 room에 속한 사용자들을 검색하는 쿼리. -->
	<select id="selectMsgRoomEmp" parameterType="int" resultType="MsgInfoVO">
	SELECT
	    a.MSG_ROOM_ID,
	    a.EMP_ID,
	    a.LAST_MSG_CONTENT,
	    a.LAST_MSG_DATE,
	    b.EMP_NAME
	FROM
	    msg_info A INNER JOIN EMPLOYEE B on (A.EMP_ID = B.EMP_ID)
	    
	WHERE MSG_ROOM_ID = #{msgRoomId}
	</select>

<!-- msgRoom을 검색하기 위한 쿼리. -->
	<resultMap type="MsgRoomVO" id="msgRoomMap" autoMapping="true">
		<id property="msgRoomId"  column="MSG_ROOM_ID"/>
		<collection property="msgInfoList" ofType="MsgInfoVO" autoMapping="false" >
		</collection>
	</resultMap>	
	<select id="selectMsgRoom" parameterType="Integer" resultMap="msgRoomMap" >
		SELECT
			A.MSG_ROOM_ID,
		    A.MSG_OPEN_DATE,
		    A.MSG_ROOM_NAME
		    
			 , B.EMP_ID
			 , B.MSG_APPONENT
			 , B.LAST_MSG_CONTENT
			 , B.LAST_MSG_DATE
			 , c.emp_name
		FROM
		    MSG_ROOM A LEFT OUTER JOIN MSG_INFO B ON (A.MSG_ROOM_ID = B.MSG_ROOM_ID) 
		    inner join EMPLOYEE c on (b.emp_id = c.emp_id)
		WHERE 
			A.MSG_ROOM_ID= #{msgRoomId,jdbcType=NUMERIC}    
	</select>

    

	<!-- 채팅방 등록 쿼리  -->
   <insert id="insertMsgRoom" parameterType="MsgRoomVO">
   <selectKey resultType="int" order="BEFORE" keyProperty="msgRoomId">
   		SELECT MSG_ROOM_SEQ.NEXTVAL 
   		FROM DUAL
   </selectKey>
	INSERT INTO MSG_ROOM (
	MSG_ROOM_ID
	, MSG_OPEN_DATE 
	, MSG_ROOM_NAME
	
	) VALUES (
	  
	#{msgRoomId,jdbcType=NUMERIC}
	, SYSTIMESTAMP
	, #{msgRoomName,jdbcType=VARCHAR}
	)
   
   </insert>
   
   
   <insert id="insertMsgInfo" parameterType="MsgInfoVO">
   insert into MSG_INFO (
		   MSG_ROOM_ID,
		    EMP_ID,
		    LAST_MSG_DATE
   ) VALUES (
		  #{msgRoomId,jdbcType=NUMERIC}
		, #{empId,jdbcType=VARCHAR}
		, SYSTIMESTAMP
   )
   </insert>

<!-- emp목록 가져오기 -->
   <select id="empList" resultType="EmployeeDPMTVO" parameterType="String">
   SELECT E.EMP_ID, E.EMP_NAME
  	FROM ORGANIZATION_INFO O JOIN EMPLOYEE E ON O.EMP_ID=E.EMP_ID
                           JOIN DEPARTMENT D ON O.TEAM_ID=D.TEAM_ID
                     AND TEAM_NAME = #{teamName}
                     ORDER BY TEAM_NAME ASC
   </select>
   
    <select id="departList" resultType="EmployeeDPMTVO">
   		SELECT TEAM_NAME
		FROM DEPARTMENT
   		ORDER BY TEAM_NAME ASC
   </select>

<!-- 해당방에 메세지 리스트를 역순으로 뽑는 쿼리 -->
	<select id="selectMessageList" parameterType="Integer" resultType="MessageVO">
		SELECT
		    A.MSG_ID,
		    A.MSG_CONTENT,
		    A.MSG_DATE,
		    A.MSG_ISREAD,
		    A.MSG_ROOM_ID,
		    A.EMP_ID,
		    NVL( (SELECT C.EMP_ATCH_SAVE_NAME FROM EMP_ATCH_FILE C WHERE C.EMP_ATCH_CLASFCT = 0 AND C.EMP_ATCH_ID = B.EMP_ATCH_ID), 'profile-12.jpg')  EMP_ATCH_SAVE_NAME   
		FROM  
		    MESSAGE A LEFT OUTER JOIN EMPLOYEE B ON (A.EMP_ID = B.EMP_ID)
		WHERE  MSG_ROOM_ID = #{msgRoomId,jdbcType=NUMERIC}  
		ORDER BY MSG_DATE ASC
	</select>

<!-- 메세지를 추가하는 쿼리 -->
	<insert id="insertMsg" parameterType="MessageVO">
	<selectKey resultType="int" order="BEFORE" keyProperty="msgId">
   		SELECT MSG_SEQ.NEXTVAL 
   		FROM DUAL
   </selectKey>
	INSERT INTO MESSAGE (
	 	MSG_ID,
	    MSG_CONTENT,
	    MSG_DATE,
	    MSG_ISREAD,
	    MSG_ROOM_ID,
	    EMP_ID
	
	) VALUES (
	  
	#{msgId,jdbcType=NUMERIC}
	, #{msgContent,jdbcType=VARCHAR}
	, SYSTIMESTAMP
	, 0
	, #{msgRoomId,jdbcType=NUMERIC}
	, #{empId,jdbcType=VARCHAR}
	)
	</insert>

<!-- 메세지VO 를 검색하는 메세지. -->	
	<select id="selectMsg" parameterType="Integer" resultType="MessageVO">
	SELECT
		    MSG_ID,
		    MSG_CONTENT,
		    MSG_DATE,
		    MSG_ISREAD,
		    MSG_ROOM_ID,
		    EMP_ID
		FROM
		    MESSAGE
		WHERE  MSG_ID = #{msgId,jdbcType=NUMERIC} 
	
	</select>

	<update id="updateMsgInfo" parameterType="MessageVO">
UPDATE MSG_INFO
    SET
        LAST_MSG_CONTENT = #{msgContent,jdbcType=VARCHAR},
        LAST_MSG_DATE = #{msgDate}
WHERE
    MSG_ROOM_ID = #{msgRoomId,jdbcType=NUMERIC}
<!--     AND EMP_ID = #{empId,jdbcType=VARCHAR} -->
		
	</update>

</mapper>